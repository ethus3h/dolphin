// This file is generated by kconfig_compiler_kf5 from dolphin_detailsmodesettings.kcfg.
// All changes you do to this file will be lost.
#ifndef DETAILSMODESETTINGS_H
#define DETAILSMODESETTINGS_H

#include <qglobal.h>
#include <kconfigskeleton.h>
#include <QCoreApplication>
#include <QDebug>

#include <kiconloader.h>
#include <kglobalsettings.h>
class DetailsModeSettings : public KConfigSkeleton
{
  public:

    DetailsModeSettings( );
    ~DetailsModeSettings();

    /**
      Set Font family
    */
    void setFontFamily( const QString & v )
    {
      if (!isImmutable( QStringLiteral( "FontFamily" ) ))
        mFontFamily = v;
    }

    /**
      Get Font family
    */
    QString fontFamily() const
    {
      return mFontFamily;
    }

    /**
      Set Use system font
    */
    void setUseSystemFont( bool v )
    {
      if (!isImmutable( QStringLiteral( "UseSystemFont" ) ))
        mUseSystemFont = v;
    }

    /**
      Get Use system font
    */
    bool useSystemFont() const
    {
      return mUseSystemFont;
    }

    /**
      Set Font size
    */
    void setFontSize( double v )
    {
      if (!isImmutable( QStringLiteral( "FontSize" ) ))
        mFontSize = v;
    }

    /**
      Get Font size
    */
    double fontSize() const
    {
      return mFontSize;
    }

    /**
      Set Italic
    */
    void setItalicFont( bool v )
    {
      if (!isImmutable( QStringLiteral( "ItalicFont" ) ))
        mItalicFont = v;
    }

    /**
      Get Italic
    */
    bool italicFont() const
    {
      return mItalicFont;
    }

    /**
      Set Font weight
    */
    void setFontWeight( int v )
    {
      if (!isImmutable( QStringLiteral( "FontWeight" ) ))
        mFontWeight = v;
    }

    /**
      Get Font weight
    */
    int fontWeight() const
    {
      return mFontWeight;
    }

    /**
      Set Icon size
    */
    void setIconSize( int v )
    {
      if (!isImmutable( QStringLiteral( "IconSize" ) ))
        mIconSize = v;
    }

    /**
      Get Icon size
    */
    int iconSize() const
    {
      return mIconSize;
    }

    /**
      Set Preview size
    */
    void setPreviewSize( int v )
    {
      if (!isImmutable( QStringLiteral( "PreviewSize" ) ))
        mPreviewSize = v;
    }

    /**
      Get Preview size
    */
    int previewSize() const
    {
      return mPreviewSize;
    }

    /**
      Set Expandable folders
    */
    void setExpandableFolders( bool v )
    {
      if (!isImmutable( QStringLiteral( "ExpandableFolders" ) ))
        mExpandableFolders = v;
    }

    /**
      Get Expandable folders
    */
    bool expandableFolders() const
    {
      return mExpandableFolders;
    }

    /**
      Set Position of columns
    */
    void setColumnPositions( const QList<int> & v )
    {
      if (!isImmutable( QStringLiteral( "ColumnPositions" ) ))
        mColumnPositions = v;
    }

    /**
      Get Position of columns
    */
    QList<int> columnPositions() const
    {
      return mColumnPositions;
    }

  protected:

    // DetailsMode
    QString mFontFamily;
    bool mUseSystemFont;
    double mFontSize;
    bool mItalicFont;
    int mFontWeight;
    int mIconSize;
    int mPreviewSize;
    bool mExpandableFolders;
    QList<int> mColumnPositions;

  private:
};

#endif

