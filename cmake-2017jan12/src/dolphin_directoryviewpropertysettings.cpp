// This file is generated by kconfig_compiler_kf5 from dolphin_directoryviewpropertysettings.kcfg.
// All changes you do to this file will be lost.

#include "dolphin_directoryviewpropertysettings.h"

ViewPropertySettings::ViewPropertySettings(  KSharedConfig::Ptr config  )
  : KConfigSkeleton( config )
{
  setCurrentGroup( QStringLiteral( "Settings" ) );

  KConfigSkeleton::ItemBool  *itemHiddenFilesShown;
  itemHiddenFilesShown = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "HiddenFilesShown" ), mHiddenFilesShown, false );
  addItem( itemHiddenFilesShown, QStringLiteral( "HiddenFilesShown" ) );

  setCurrentGroup( QStringLiteral( "Dolphin" ) );

  KConfigSkeleton::ItemInt  *itemVersion;
  itemVersion = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "Version" ), mVersion, -1 );
  addItem( itemVersion, QStringLiteral( "Version" ) );
  KConfigSkeleton::ItemInt  *itemViewMode;
  itemViewMode = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "ViewMode" ), mViewMode, DolphinView::IconsView );
  addItem( itemViewMode, QStringLiteral( "ViewMode" ) );
  KConfigSkeleton::ItemBool  *itemPreviewsShown;
  itemPreviewsShown = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "PreviewsShown" ), mPreviewsShown, false );
  addItem( itemPreviewsShown, QStringLiteral( "PreviewsShown" ) );
  KConfigSkeleton::ItemBool  *itemGroupedSorting;
  itemGroupedSorting = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "GroupedSorting" ), mGroupedSorting, false );
  addItem( itemGroupedSorting, QStringLiteral( "GroupedSorting" ) );
  KConfigSkeleton::ItemString  *itemSortRole;
  itemSortRole = new KConfigSkeleton::ItemString( currentGroup(), QStringLiteral( "SortRole" ), mSortRole, QStringLiteral( "text" ) );
  addItem( itemSortRole, QStringLiteral( "SortRole" ) );
  KConfigSkeleton::ItemInt  *itemSortOrder;
  itemSortOrder = new KConfigSkeleton::ItemInt( currentGroup(), QStringLiteral( "SortOrder" ), mSortOrder, Qt::AscendingOrder );
  itemSortOrder->setMinValue(Qt::AscendingOrder);
  itemSortOrder->setMaxValue(Qt::DescendingOrder);
  addItem( itemSortOrder, QStringLiteral( "SortOrder" ) );
  KConfigSkeleton::ItemBool  *itemSortFoldersFirst;
  itemSortFoldersFirst = new KConfigSkeleton::ItemBool( currentGroup(), QStringLiteral( "SortFoldersFirst" ), mSortFoldersFirst, true );
  addItem( itemSortFoldersFirst, QStringLiteral( "SortFoldersFirst" ) );
  KConfigSkeleton::ItemStringList  *itemVisibleRoles;
  itemVisibleRoles = new KConfigSkeleton::ItemStringList( currentGroup(), QStringLiteral( "VisibleRoles" ), mVisibleRoles );
  addItem( itemVisibleRoles, QStringLiteral( "VisibleRoles" ) );
  QList<int> defaultHeaderColumnWidths;

  KConfigSkeleton::ItemIntList  *itemHeaderColumnWidths;
  itemHeaderColumnWidths = new KConfigSkeleton::ItemIntList( currentGroup(), QStringLiteral( "HeaderColumnWidths" ), mHeaderColumnWidths, defaultHeaderColumnWidths );
  addItem( itemHeaderColumnWidths, QStringLiteral( "HeaderColumnWidths" ) );
  KConfigSkeleton::ItemDateTime  *itemTimestamp;
  itemTimestamp = new KConfigSkeleton::ItemDateTime( currentGroup(), QStringLiteral( "Timestamp" ), mTimestamp );
  addItem( itemTimestamp, QStringLiteral( "Timestamp" ) );
  KConfigSkeleton::ItemStringList  *itemAdditionalInfo;
  itemAdditionalInfo = new KConfigSkeleton::ItemStringList( currentGroup(), QStringLiteral( "AdditionalInfo" ), mAdditionalInfo );
  addItem( itemAdditionalInfo, QStringLiteral( "AdditionalInfo" ) );
}

ViewPropertySettings::~ViewPropertySettings()
{
}

