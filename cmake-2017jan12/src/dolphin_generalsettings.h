// This file is generated by kconfig_compiler_kf5 from dolphin_generalsettings.kcfg.
// All changes you do to this file will be lost.
#ifndef GENERALSETTINGS_H
#define GENERALSETTINGS_H

#include <qglobal.h>
#include <kconfigskeleton.h>
#include <QCoreApplication>
#include <QDebug>

#include <QDir>
#include <kglobalsettings.h>
class GeneralSettings : public KConfigSkeleton
{
  public:

    GeneralSettings( );
    ~GeneralSettings();

    /**
      Set Should the URL be editable for the user
    */
    void setEditableUrl( bool v )
    {
      if (!isImmutable( QStringLiteral( "EditableUrl" ) ))
        mEditableUrl = v;
    }

    /**
      Get Should the URL be editable for the user
    */
    bool editableUrl() const
    {
      return mEditableUrl;
    }

    /**
      Set Text completion mode of the URL Navigator
    */
    void setUrlCompletionMode( int v )
    {
      if (!isImmutable( QStringLiteral( "UrlCompletionMode" ) ))
        mUrlCompletionMode = v;
    }

    /**
      Get Text completion mode of the URL Navigator
    */
    int urlCompletionMode() const
    {
      return mUrlCompletionMode;
    }

    /**
      Set Should the full path be shown inside the location bar
    */
    void setShowFullPath( bool v )
    {
      if (!isImmutable( QStringLiteral( "ShowFullPath" ) ))
        mShowFullPath = v;
    }

    /**
      Get Should the full path be shown inside the location bar
    */
    bool showFullPath() const
    {
      return mShowFullPath;
    }

    /**
      Set Is the application started the first time (internal setting not shown in the UI)
    */
    void setFirstRun( bool v )
    {
      if (!isImmutable( QStringLiteral( "FirstRun" ) ))
        mFirstRun = v;
    }

    /**
      Get Is the application started the first time (internal setting not shown in the UI)
    */
    bool firstRun() const
    {
      return mFirstRun;
    }

    /**
      Set Internal version of Dolphin, containing 3 digits for mayor, minor, bugfix
    */
    void setVersion( int v )
    {
      if (!isImmutable( QStringLiteral( "Version" ) ))
        mVersion = v;
    }

    /**
      Get Internal version of Dolphin, containing 3 digits for mayor, minor, bugfix
    */
    int version() const
    {
      return mVersion;
    }

    /**
      Set Have the startup settings been modified (internal setting not shown in the UI)
    */
    void setModifiedStartupSettings( bool v )
    {
      if (!isImmutable( QStringLiteral( "ModifiedStartupSettings" ) ))
        mModifiedStartupSettings = v;
    }

    /**
      Get Have the startup settings been modified (internal setting not shown in the UI)
    */
    bool modifiedStartupSettings() const
    {
      return mModifiedStartupSettings;
    }

    /**
      Set Home URL
    */
    void setHomeUrl( const QString & v )
    {
      if (!isImmutable( QStringLiteral( "HomeUrl" ) ))
        mHomeUrl = v;
    }

    /**
      Get Home URL
    */
    QString homeUrl() const
    {
      return mHomeUrl;
    }

    /**
      Set Split the view into two panes
    */
    void setSplitView( bool v )
    {
      if (!isImmutable( QStringLiteral( "SplitView" ) ))
        mSplitView = v;
    }

    /**
      Get Split the view into two panes
    */
    bool splitView() const
    {
      return mSplitView;
    }

    /**
      Set Should the filter bar be shown
    */
    void setFilterBar( bool v )
    {
      if (!isImmutable( QStringLiteral( "FilterBar" ) ))
        mFilterBar = v;
    }

    /**
      Get Should the filter bar be shown
    */
    bool filterBar() const
    {
      return mFilterBar;
    }

    /**
      Set Should the view properties be used for all directories
    */
    void setGlobalViewProps( bool v )
    {
      if (!isImmutable( QStringLiteral( "GlobalViewProps" ) ))
        mGlobalViewProps = v;
    }

    /**
      Get Should the view properties be used for all directories
    */
    bool globalViewProps() const
    {
      return mGlobalViewProps;
    }

    /**
      Set Browse through archives
    */
    void setBrowseThroughArchives( bool v )
    {
      if (!isImmutable( QStringLiteral( "BrowseThroughArchives" ) ))
        mBrowseThroughArchives = v;
    }

    /**
      Get Browse through archives
    */
    bool browseThroughArchives() const
    {
      return mBrowseThroughArchives;
    }

    /**
      Set Ask for confirmation when closing windows with multiple tabs.
    */
    void setConfirmClosingMultipleTabs( bool v )
    {
      if (!isImmutable( QStringLiteral( "ConfirmClosingMultipleTabs" ) ))
        mConfirmClosingMultipleTabs = v;
    }

    /**
      Get Ask for confirmation when closing windows with multiple tabs.
    */
    bool confirmClosingMultipleTabs() const
    {
      return mConfirmClosingMultipleTabs;
    }

    /**
      Set Rename inline
    */
    void setRenameInline( bool v )
    {
      if (!isImmutable( QStringLiteral( "RenameInline" ) ))
        mRenameInline = v;
    }

    /**
      Get Rename inline
    */
    bool renameInline() const
    {
      return mRenameInline;
    }

    /**
      Set Show selection toggle
    */
    void setShowSelectionToggle( bool v )
    {
      if (!isImmutable( QStringLiteral( "ShowSelectionToggle" ) ))
        mShowSelectionToggle = v;
    }

    /**
      Get Show selection toggle
    */
    bool showSelectionToggle() const
    {
      return mShowSelectionToggle;
    }

    /**
      Set Show tooltips
    */
    void setShowToolTips( bool v )
    {
      if (!isImmutable( QStringLiteral( "ShowToolTips" ) ))
        mShowToolTips = v;
    }

    /**
      Get Show tooltips
    */
    bool showToolTips() const
    {
      return mShowToolTips;
    }

    /**
      Set Show 'Copy To' and 'Move To' commands in context menu
    */
    void setShowCopyMoveMenu( bool v )
    {
      if (!isImmutable( QStringLiteral( "ShowCopyMoveMenu" ) ))
        mShowCopyMoveMenu = v;
    }

    /**
      Get Show 'Copy To' and 'Move To' commands in context menu
    */
    bool showCopyMoveMenu() const
    {
      return mShowCopyMoveMenu;
    }

    /**
      Set Timestamp since when the view properties are valid
    */
    void setViewPropsTimestamp( const QDateTime & v )
    {
      if (!isImmutable( QStringLiteral( "ViewPropsTimestamp" ) ))
        mViewPropsTimestamp = v;
    }

    /**
      Get Timestamp since when the view properties are valid
    */
    QDateTime viewPropsTimestamp() const
    {
      return mViewPropsTimestamp;
    }

    /**
      Set Use auto-expanding folders for all view types
    */
    void setAutoExpandFolders( bool v )
    {
      if (!isImmutable( QStringLiteral( "AutoExpandFolders" ) ))
        mAutoExpandFolders = v;
    }

    /**
      Get Use auto-expanding folders for all view types
    */
    bool autoExpandFolders() const
    {
      return mAutoExpandFolders;
    }

    /**
      Set Show zoom slider in the statusbar
    */
    void setShowZoomSlider( bool v )
    {
      if (!isImmutable( QStringLiteral( "ShowZoomSlider" ) ))
        mShowZoomSlider = v;
    }

    /**
      Get Show zoom slider in the statusbar
    */
    bool showZoomSlider() const
    {
      return mShowZoomSlider;
    }

    /**
      Set Show the space information in the statusbar
    */
    void setShowSpaceInfo( bool v )
    {
      if (!isImmutable( QStringLiteral( "ShowSpaceInfo" ) ))
        mShowSpaceInfo = v;
    }

    /**
      Get Show the space information in the statusbar
    */
    bool showSpaceInfo() const
    {
      return mShowSpaceInfo;
    }

    /**
      Set Lock the layout of the panels
    */
    void setLockPanels( bool v )
    {
      if (!isImmutable( QStringLiteral( "LockPanels" ) ))
        mLockPanels = v;
    }

    /**
      Get Lock the layout of the panels
    */
    bool lockPanels() const
    {
      return mLockPanels;
    }

  protected:

    // General
    bool mEditableUrl;
    int mUrlCompletionMode;
    bool mShowFullPath;
    bool mFirstRun;
    int mVersion;
    bool mModifiedStartupSettings;
    QString mHomeUrl;
    bool mSplitView;
    bool mFilterBar;
    bool mGlobalViewProps;
    bool mBrowseThroughArchives;
    bool mConfirmClosingMultipleTabs;
    bool mRenameInline;
    bool mShowSelectionToggle;
    bool mShowToolTips;
    bool mShowCopyMoveMenu;
    QDateTime mViewPropsTimestamp;
    bool mAutoExpandFolders;
    bool mShowZoomSlider;
    bool mShowSpaceInfo;
    bool mLockPanels;

  private:
};

#endif

